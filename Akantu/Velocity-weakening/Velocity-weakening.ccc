#include "solid_mechanics_model.hh"
#include "solid_mechanics_model_cohesive.hh"
#include "material_elastic.hh"
#include <iostream>
#include <omp.h>

int main(int argc, char * argv[]) {
    omp_set_num_threads(8);
    #pragma omp parallel
    {
        int tid = omp_get_thread_num();
        printf("Thread %d is running\n", tid);
    }
    std::cout << "Using " << omp_get_max_threads() << " OpenMP threads.\n";

    
    
    const akantu::Int spatial_dimension = 3;
    const akantu::Int max_steps = 100;
    const std::string MESHFILE = "../../../Models/50mm-PMMA.msh";
    const std::string MATERIALFILE = "../../../Materials/material.dat";

    akantu::initialize(MATERIALFILE, argc, argv);
    akantu::Mesh mesh(spatial_dimension);
    std::cout << "Reading mesh from: " << MESHFILE << std::endl;
    mesh.read(MESHFILE);
    if (mesh.getNbNodes() == 0) {
        std::cerr << "ERROR: Mesh has 0 nodes. Check if " << MESHFILE << " exists in your directory.\n";
        return 1;
    }
    std::cout << "Mesh loaded: " << mesh.getNbNodes() << " nodes.\n";



    // akantu::SolidMechanicsModelCohesive model(mesh);


    // akantu::MaterialCohesiveRules rules{{{"top", "bottom"}, "PMMA"},
    //                                     {{"top", "top"}, "PMMA"},
    //                                     {{"bottom", "bottom"}, "PMMA"}};
    // auto cohesive_material_selector = std::make_shared<akantu::MaterialCohesiveRulesSelector>(model, rules);
    // auto bulk_material_selector = std::make_shared<akantu::MeshDataMaterialSelector<std::string>>("physical_names", model);
    // auto && current_selector = model.getMaterialSelector();
    // cohesive_material_selector->setFallback(bulk_material_selector);
    // bulk_material_selector->setFallback(current_selector);
    // model.setMaterialSelector(cohesive_material_selector);


    

    // model.initFull(akantu::_analysis_method = akantu::_explicit_lumped_mass, akantu::_is_extrinsic = true);


    



    return 0;
}